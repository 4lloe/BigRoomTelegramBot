import json
import telebot
import datetime
from telebot import types

telegrambot_token = "6981720034:AAFpPGkTreAt_WzUw65mPIxgMzdk4KJ2gV4"
language = "english"
LOCALES_DIR = 'locales/'
bot = telebot.TeleBot(telegrambot_token)

#!!!–ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î
# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ —Å—Ç–æ–∏—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
user_state = {}


def user_init(user_id): # –ü–µ—Ä–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ FREE
    user_state[user_id] = {'started': True, 'language': None,'subscribe_type': "free",
                           'valid_until': datetime.date(0000, 00, 00), 'payment_type': 'none'}

def load_translations(lang_code):
    with open(f'locales/{lang_code}.json', 'r', encoding='utf-8') as file:
        return json.load(file)


translations_cache = {}

def get_translation(lang_code, key):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —è–∑—ã–∫–∞ –≤ –∫—ç—à
    if lang_code not in translations_cache:
        translations_cache[lang_code] = load_translations(lang_code)
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –∫–ª—é—á—É
    return translations_cache[lang_code].get(key, "")


def get_user_language(user_id):
    if user_id in user_state:
        return user_state[user_id]
    else:
        return 'en'

def get_user_lang(user_id):

    if user_state[user_id]['language'] is None:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('English', callback_data='lang_en'))
        markup.add(types.InlineKeyboardButton('Russian', callback_data='lang_ru'))
        markup.add(types.InlineKeyboardButton('Ukrainian', callback_data='lang_ua'))
        bot.send_message(user_id, 'Choose language:', reply_markup=markup)
    else:
        show_keyboard(user_id)

#–ú–µ—Ç–æ–¥ —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –æ–ø—Ü–∏–∏ Account
def show_account(user_id):
    user_lang = user_state[user_id]['language']
    subscribe_type = user_state[user_id].get('subscribe_type', 'Free')
    valid_until = user_state[user_id].get('valid_until', '-')
    cur_model = user_state[user_id].get('current_model', 'Claude Haiku Free')
    haiku_req = user_state[user_id].get('haiku_req', 2)
    sonnet_req = user_state[user_id].get('sonnet_req', 0)
    gpt_turbo_req = user_state[user_id].get('gptTurbo_req', 0)

    account_message_template = (
        f"üë§ User ID: {user_id}\n"
        f"‚≠êÔ∏è Subscription Type: {subscribe_type}\n"
        f"üìÜ Valid Until: {valid_until}\n"
        f"ü§ñ Current model: {cur_model}\n"
        f"‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì\n"
        f"üå∏ Haiku requests: {haiku_req}\n"
        f"üìú Sonnet requests: {sonnet_req}\n"
        f"üí® GPT-Turbo: {gpt_turbo_req}\n"
    )

    if user_lang == 'en':
        bot.send_message(user_id, account_message_template)
        bot.send_message(user_id, account_message_template, reply_markup=get_inline_keyboard(user_id))
    elif user_lang == 'ru':
        account_message_ru = (((((account_message_template.replace("Subscription Type", "–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏")
                              .replace("Valid Until", "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ"))
                              .replace("Current model", "–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å"))
                              .replace("Haiku requests", "–ó–∞–ø—Ä–æ—Å—ã –•–∞–π–∫—É"))
                              .replace("Sonnet requests", "–ó–∞–ø—Ä–æ—Å—ã –°–æ–Ω–µ—Ç–æ–≤"))
                              .replace("GPT-Turbo", "GPT-–¢—É—Ä–±–æ"))
        bot.send_message(user_id, account_message_ru)
        bot.send_message(user_id, account_message_template, reply_markup=get_inline_keyboard(user_id))
    elif user_lang == 'ua':
        account_message_ua = (((((account_message_template.replace("Subscription Type", "–¢–∏–ø –ø—ñ–¥–ø–∏—Å–∫–∏")
                              .replace("Valid Until", "–î—ñ–π—Å–Ω–æ –¥–æ"))
                              .replace("Current model", "–ü–æ—Ç–æ—á–Ω–∞ –º–æ–¥–µ–ª—å"))
                              .replace("Haiku requests", "–ó–∞–ø–∏—Ç–∏ –•–∞–π–∫—É"))
                              .replace("Sonnet requests", "–ó–∞–ø–∏—Ç–∏ –°–æ–Ω–µ—Ç—ñ–≤"))
                              .replace("GPT-Turbo", "GPT-–¢—É—Ä–±–æ"))
        bot.send_message(user_id, account_message_ua)
        bot.send_message(user_id, account_message_template, reply_markup=get_inline_keyboard(user_id))
    else:
        # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        show_keyboard(user_id,"something wrong,try later")

#–ú–µ—Ç–æ–¥ —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –≤—ã–≤–æ–¥ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ–ø—Ü–∏—è–º–∏
def show_keyboard(user_id, call):
    if user_id in user_state and user_state[user_id]['language']:
        user_lang = user_state[user_id]['language']
        account_btn = get_translation(user_lang, "account_btn")
        settings_btn = get_translation(user_lang, "settings_btn")
        tariffs_btn = get_translation(user_lang, "tariffs_btn")
        allow_models_btn = get_translation(user_lang, "allow_models_btn")

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add(account_btn, settings_btn, allow_models_btn, tariffs_btn)

        bot.send_message(user_id, call, reply_markup=markup)

    else:
        get_user_lang(user_id)


# –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def get_inline_keyboard(user_id):
    user_lang = user_state[user_id]['language']

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
    settings_text = get_translation(user_lang, "settings_btn")
    buy_premium_text = get_translation(user_lang, "buy_premium_btn")

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text=settings_text, callback_data='settings'))
    markup.add(types.InlineKeyboardButton(text=buy_premium_text, callback_data='buy_premium'))

    return markup
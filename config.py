import json
import telebot
import datetime
from telebot import types

telegrambot_token = "6981720034:AAFpPGkTreAt_WzUw65mPIxgMzdk4KJ2gV4"
language = "english"
LOCALES_DIR = 'locales/'
bot = telebot.TeleBot(telegrambot_token)

#!!!–ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î
# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ —Å—Ç–æ–∏—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
user_state = {}


def user_init(user_id): # –ü–µ—Ä–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ FREE
    user_state[user_id] = {'started': True, 'language': None,'subscribe_type': "free",
                           'valid_until': datetime.date(0000, 00, 00), 'payment_type': 'none'}

def load_translations(lang_code):
    with open(f'locales/{lang_code}.json', 'r', encoding='utf-8') as file:
        return json.load(file)


translations_cache = {}

def get_translation(lang_code, key):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —è–∑—ã–∫–∞ –≤ –∫—ç—à
    if lang_code not in translations_cache:
        translations_cache[lang_code] = load_translations(lang_code)
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –∫–ª—é—á—É
    return translations_cache[lang_code].get(key, "")


def get_user_language(user_id):
    if user_id in user_state:
        return user_state[user_id]
    else:
        return 'en'

def get_user_lang(user_id):

    if user_state[user_id]['language'] is None:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('English', callback_data='lang_en'))
        markup.add(types.InlineKeyboardButton('Russian', callback_data='lang_ru'))
        markup.add(types.InlineKeyboardButton('Ukrainian', callback_data='lang_ua'))
        bot.send_message(user_id, 'Choose language:', reply_markup=markup)
    else:
        show_keyboard(user_id)

#–ú–µ—Ç–æ–¥ —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –æ–ø—Ü–∏–∏ Account
def show_account(user_id):
    user_lang = user_state[user_id]['language']
    subscribe_type = user_state[user_id].get('subscribe_type', 'Free')
    valid_until = user_state[user_id].get('valid_until', '-')
    cur_model = user_state[user_id].get('current_model', 'Claude Haiku Free')
    haiku_req = user_state[user_id].get('haiku_req', 2)
    sonnet_req = user_state[user_id].get('sonnet_req', 0)
    gpt_turbo_req = user_state[user_id].get('gptTurbo_req', 0)

    account_message_template = (
        f"üë§ User ID: {user_id}\n"
        f"‚≠êÔ∏è Subscription Type: {subscribe_type}\n"
        f"üìÜ Valid Until: {valid_until}\n"
        f"ü§ñ Current model: {cur_model}\n"
        f"‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì\n"
        f"üå∏ Haiku requests: {haiku_req}\n"
        f"üìú Sonnet requests: {sonnet_req}\n"
        f"üí® GPT-Turbo: {gpt_turbo_req}\n"
    )

    if user_lang == 'en':

        bot.send_message(user_id, account_message_template, reply_markup=get_account_inline_keyboard(user_id))
    elif user_lang == 'ru':
        account_message_ru = (((((account_message_template.replace("Subscription Type", "–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏")
                              .replace("Valid Until", "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ"))
                              .replace("Current model", "–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å"))
                              .replace("Haiku requests", "–ó–∞–ø—Ä–æ—Å—ã –•–∞–π–∫—É"))
                              .replace("Sonnet requests", "–ó–∞–ø—Ä–æ—Å—ã –°–æ–Ω–µ—Ç–æ–≤"))
                              .replace("GPT-Turbo", "GPT-–¢—É—Ä–±–æ"))

        bot.send_message(user_id,  account_message_ru, reply_markup=get_account_inline_keyboard(user_id))
    elif user_lang == 'ua':
        account_message_ua = (((((account_message_template.replace("Subscription Type", "–¢–∏–ø –ø—ñ–¥–ø–∏—Å–∫–∏")
                              .replace("Valid Until", "–î—ñ–π—Å–Ω–æ –¥–æ"))
                              .replace("Current model", "–ü–æ—Ç–æ—á–Ω–∞ –º–æ–¥–µ–ª—å"))
                              .replace("Haiku requests", "–ó–∞–ø–∏—Ç–∏ –•–∞–π–∫—É"))
                              .replace("Sonnet requests", "–ó–∞–ø–∏—Ç–∏ –°–æ–Ω–µ—Ç—ñ–≤"))
                              .replace("GPT-Turbo", "GPT-–¢—É—Ä–±–æ"))

        bot.send_message(user_id, account_message_ua, reply_markup=get_account_inline_keyboard(user_id))
    else:
        # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        show_keyboard(user_id,"something wrong,try later")


def show_subscribe(message):
    user_id = message.from_user.id
    user_lang = user_state[user_id]['language']
    subscribe_message_template = (
        "Are you looking for enhanced capabilities and increased request limits for your bot? "
        "Consider our subscriptions, which offer additional features and extended limits, "
        "as well as the option to purchase requests separately:\n\n"
        "üëå Starter:\n"
        "‚Äî Subscription to Claude 3 Haiku ‚Äî up to 100 requests per day.\n"
        "‚Äî Ideally suited for creating concise haiku poetry and text generation.\n"
        "‚Äî Ad-free experience.\n"
        "‚Äî Priority server access for accelerated response retrieval.\n"
        "‚Äî 10% discount on purchasing additional Claude tokens and requests.\n\n"
        "üåâ Intermediate:\n"
        "‚Äî Subscription to Claude 3 Sonnet ‚Äî up to 150 requests per day.\n"
        "‚Äî Ability to create structured sonnets and poetry.\n"
        "‚Äî Continuous access with no delays between requests.\n"
        "‚Äî Advanced configuration options for precise bot functionality tuning.\n"
        "‚Äî Increased context size for improved response accuracy.\n"
        "‚Äî 15% discount on purchasing additional Claude tokens and requests.\n\n"
        "üöÄ Advanced:\n"
        "‚Äî Subscription to ChatGPT Turbo with plugins ‚Äî unlimited requests per day.\n"
        "‚Äî Group chat support in Telegram groups.\n"
        "‚Äî Plugin integration for extended functionality.\n"
        "‚Äî External API integration for accessing global network information and utilizing it in responses.\n"
        "‚Äî 20% discount on purchasing additional Claude tokens and requests.\n"
        "‚Äî Early access to beta versions of new products and neural networks.\n\n"
        "These subscriptions are designed for those who aim to maximize the potential of their bot "
        "and ensure efficient interaction with artificial intelligence on the Telegram platform."
    )

    if user_lang == 'en':
        bot.send_message(user_id, subscribe_message_template)
    elif user_lang == 'ru':
        subscribe_message = subscribe_message_template.replace(
            "Are you looking for enhanced capabilities and increased request limits for your bot?",
            "–í—ã –∏—â–µ—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞?") \
            .replace("Consider our subscriptions,", "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏,") \
            .replace("as well as the option to purchase requests separately:",
                     "–∞ —Ç–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:") \
            .replace("Subscription to", "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞") \
            .replace("requests per day", "–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å") \
            .replace("unlimited requests per day", "–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å") \
            .replace("Ad-free experience.", "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –≤—Å—Ç–∞–≤–æ–∫.") \
            .replace("Priority server access for accelerated response retrieval.",
                     "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä–∞–º –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤.") \
            .replace("discount on purchasing additional", "—Å–∫–∏–¥–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö") \
            .replace("Early access to beta versions of new products and neural networks.",
                     "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–µ—Ç–∞-–≤–µ—Ä—Å–∏—è–º –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π.") \
            .replace("These subscriptions are designed for those who aim to",
                     "–≠—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Å—Ç—Ä–µ–º–∏—Ç—Å—è") \
            .replace("and ensure efficient interaction with artificial intelligence on the Telegram platform.",
                     "–∏ –æ–±–µ—Å–ø–µ—á–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Telegram.")
        bot.send_message(user_id, subscribe_message)
    elif user_lang == 'ua':
        # –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —è–∑—ã–∫
        subscribe_message_ua = (((((((((((subscribe_message_template.replace(
            "Are you looking for enhanced capabilities and increased request limits for your bot?",
            "–í–∏ —à—É–∫–∞—î—Ç–µ —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Ç–∞ –∑–±—ñ–ª—å—à–µ–Ω–∏–π –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è –≤–∞—à–æ–≥–æ –±–æ—Ç–∞?")
                                .replace("Consider our subscriptions,", "–†–æ–∑–≥–ª—è–Ω—å—Ç–µ –Ω–∞—à—ñ –ø—ñ–¥–ø–∏—Å–∫–∏,"))
                                .replace("as well as the option to purchase requests separately:",
                 "–∞ —Ç–∞–∫–æ–∂ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ–∫—Ä–µ–º–æ–≥–æ –ø—Ä–∏–¥–±–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤:"))
                                .replace("Subscription to", "–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞"))
                                .replace("requests per day", "–∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –¥–µ–Ω—å"))
                                .replace("unlimited requests per day", "–Ω–µ–æ–±–º–µ–∂–µ–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –¥–µ–Ω—å"))
                                .replace("Ad-free experience.", "–î–æ—Å–≤—ñ–¥ –±–µ–∑ —Ä–µ–∫–ª–∞–º–∏."))
                                .replace("Priority server access for accelerated response retrieval.",
                 "–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ —Å–µ—Ä–≤–µ—Ä—ñ–≤ –¥–ª—è –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π."))
                                .replace("discount on purchasing additional", "–∑–Ω–∏–∂–∫–∞ –ø—Ä–∏ –∫—É–ø—ñ–≤–ª—ñ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö"))
                                .replace("Early access to beta versions of new products and neural networks.",
                 "–î–æ—Å—Ç—Ä–æ–∫–æ–≤–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –±–µ—Ç–∞-–≤–µ—Ä—Å—ñ–π –Ω–æ–≤–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ —Ç–∞ –Ω–µ–π—Ä–æ–Ω–Ω–∏—Ö –º–µ—Ä–µ–∂."))
                                .replace("These subscriptions are designed for those who aim to", "–¶—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—ñ –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ –ø—Ä–∞–≥–Ω–µ"))
                                .replace("and ensure efficient interaction with artificial intelligence on the Telegram platform.",
                 "—Ç–∞ –∑–∞–±–µ–∑–ø–µ—á–∏—Ç–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—É –≤–∑–∞—î–º–æ–¥—ñ—é –∑ —à—Ç—É—á–Ω–∏–º —ñ–Ω—Ç–µ–ª–µ–∫—Ç–æ–º –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ Telegram."))
        bot.send_message(user_id, subscribe_message_ua)
    else:
        user_lang = user_state[user_id]['language']
        call = get_translation(user_lang, "something_wrong")
        show_keyboard(user_id, call)





#–ú–µ—Ç–æ–¥ —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –≤—ã–≤–æ–¥ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ–ø—Ü–∏—è–º–∏
def show_keyboard(user_id, call):
    if user_id in user_state and user_state[user_id]['language']:
        user_lang = user_state[user_id]['language']
        account_btn = get_translation(user_lang, "account_btn")
        settings_btn = get_translation(user_lang, "settings_btn")
        tariffs_btn = get_translation(user_lang, "tariffs_btn")
        allow_models_btn = get_translation(user_lang, "allow_models_btn")

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
        markup.add(account_btn, settings_btn, allow_models_btn, tariffs_btn)

        bot.send_message(user_id, call, reply_markup=markup)

    else:
        get_user_lang(user_id)


# –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def get_account_inline_keyboard(user_id):
    user_lang = user_state[user_id]['language']

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
    settings_text = get_translation(user_lang, "settings_btn")
    buy_premium_text = get_translation(user_lang, "buy_subscribe_btn")

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="‚öôÔ∏è"+settings_text, callback_data='settings'))
    markup.add(types.InlineKeyboardButton(text="üå†"+buy_premium_text, callback_data='buy_subscribe'))

    return markup

def get_settings_inline_keyboard(user_id):
    user_lang = user_state[user_id]['language']

    voice_text = get_translation(user_lang, "sb_voice_answers_btn")
    creativity_text = get_translation(user_lang, "sb_answers_creativity_btn")
    language_change_text = get_translation(user_lang, "sb_language_change_btn")

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="üó£Ô∏è"+voice_text, callback_data='voice_settings'))
    markup.add(types.InlineKeyboardButton(text="üé®"+creativity_text, callback_data='creativity_settings'))
    markup.add(types.InlineKeyboardButton(text="üá∫üá¶"+language_change_text, callback_data='language_settings'))
    markup.add(types.InlineKeyboardButton(text="Close",callback_data='close_btn'))

    return markup

import json
import datetime

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
import interactions  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –º–æ–¥—É–ª—å, –≤–æ–∑–º–æ–∂–Ω–æ, –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º
from utils.config import bot  # –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
from telebot import types  # –ò–º–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è Telegram
import os  # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state = {}
# –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_context = []


# –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
def user_init(user_id):
    if user_id not in user_state:
        user_state[user_id] = {
            'started': True,  # –§–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            'language': None,  # –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            'subscribe_type': 'gpt-3.5-turbo-instruct',  # –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
            'valid_until': datetime.date(2024, 3, 19),  # –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            'assistant_role': "No role for now",  # –†–æ–ª—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            'haiku_req': 3,  # –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ö–∞–π–∫—É
            'sonnet_req': 0,  # –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–æ–Ω–µ—Ç–æ–≤
            'gptTurbo_req': 0,  # –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ GPT-Turbo
            'payment_type': 'none'  # –¢–∏–ø –æ–ø–ª–∞—Ç—ã
        }


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ JSON
def load_translations(lang_code):
    with open(f'locales/{lang_code}.json', 'r', encoding='utf-8') as file:
        return json.load(file)


# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
translations_cache = {}


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ –∫–ª—é—á—É –∏ —è–∑—ã–∫–æ–≤–æ–º—É –∫–æ–¥—É
def get_translation(lang_code, key):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –≤ –∫—ç—à–µ
    if lang_code not in translations_cache:
        translations_cache[lang_code] = load_translations(lang_code)
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ –∫–ª—é—á—É
    return translations_cache[lang_code].get(key, "")


# –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID
def get_user_language(user_id):
    if user_id in user_state:
        return user_state[user_id]
    else:
        return 'en'


# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
def get_user_lang(user_id):
    if user_state[user_id]['language'] is None:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('English', callback_data='lang_en'))
        markup.add(types.InlineKeyboardButton('Russian', callback_data='lang_ru'))
        markup.add(types.InlineKeyboardButton('Ukrainian', callback_data='lang_ua'))
        bot.send_message(user_id, 'Choose language:', reply_markup=markup)
    else:
        show_keyboard(user_id)


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ–ø—Ü–∏—è–º–∏
def show_keyboard(user_id, call):
    if user_id in user_state and user_state[user_id]['language']:
        user_lang = user_state[user_id]['language']
        account_btn = get_translation(user_lang, "account_btn")
        settings_btn = get_translation(user_lang, "settings_btn")
        tariffs_btn = get_translation(user_lang, "tariffs_btn")
        allow_models_btn = get_translation(user_lang, "allow_models_btn")

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
        markup.add(account_btn, settings_btn, allow_models_btn, tariffs_btn)

        bot.send_message(user_id, call, reply_markup=markup)

    else:
        get_user_lang(user_id)


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è InlineKeyboard –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "Account"
def get_account_inline_keyboard(user_id):
    user_lang = user_state[user_id]['language']

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    settings_text = get_translation(user_lang, "settings_btn")
    buy_premium_text = get_translation(user_lang, "buy_subscribe_btn")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="‚öôÔ∏è" + settings_text, callback_data='settings'))
    markup.add(types.InlineKeyboardButton(text="üå†" + buy_premium_text, callback_data='buy_subscribe'))

    return markup


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è InlineKeyboard –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "/settings"
def get_settings_inline_keyboard(user_id):
    user_lang = user_state[user_id]['language']

    language_change_text = get_translation(user_lang, "sb_language_change_btn")
    choose_models_text = get_translation(user_lang, "choose_model_settings_text")
    close_text = get_translation(user_lang, "close_btn")
    ai_model_text = get_translation(user_lang, "ai_model_btn")
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="üá∫üá¶" + language_change_text, callback_data='language_settings'))
    markup.add(types.InlineKeyboardButton(text="üëæ" + choose_models_text, callback_data='models_settings'))
    markup.add(types.InlineKeyboardButton(text="ü§ñ" + ai_model_text, callback_data='choose_ai_call-handler'))
    markup.add(types.InlineKeyboardButton(text=close_text, callback_data='close_callback'))

    return markup


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è InlineKeyboard –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "/subscribe"
def get_subscribe_inline_keyboard(user_id):
    global starter_text, intermediate_text, advanced_text
    user_lang = user_state[user_id]['language']
    close_btn = get_translation(user_lang, "close_btn")
    if user_lang == "en":
        starter_text = "üëå Buy Starter for 14.80$/month"
        intermediate_text = "üåâ Buy Intermediate for 19.93$/month"
        advanced_text = "üöÄ Buy Advancedfor 29.93$/month"
    elif user_lang == "ru":
        starter_text = "üëå –ö—É–ø–∏—Ç—å Starter –∑–∞ 14.80$/–º–µ—Å—è—Ü"
        intermediate_text = "üåâ –ö—É–ø–∏—Ç—å Intermediate –∑–∞ 19.93$/–º–µ—Å—è—Ü"
        advanced_text = "üöÄ –ö—É–ø–∏—Ç—å Advanced –∑–∞ 29.93$/–º–µ—Å—è—Ü"
    elif user_lang == "ua":
        starter_text = "üëå –ö—É–ø–∏—Ç–∏ Starter –∑–∞ 14.80$/–º—ñ—Å—è—Ü—å"
        intermediate_text = "üåâ –ö—É–ø–∏—Ç–∏ Intermediate –∑–∞ 19.93$/–º—ñ—Å—è—Ü—å"
        advanced_text = "üöÄ –ö—É–ø–∏—Ç–∏ Advanced –∑–∞ 29.93$/–º—ñ—Å—è—Ü—å"

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text=starter_text, callback_data='starter_callback'))
    markup.add(types.InlineKeyboardButton(text=intermediate_text, callback_data='intermediate'))
    markup.add(types.InlineKeyboardButton(text=advanced_text, callback_data='advanced_callback'))
    markup.add(types.InlineKeyboardButton(text=close_btn, callback_data='close_callback'))

    return markup


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è InlineKeyboard –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "/models"
def get_models_inline_keyboard(user_id):
    user_lang = user_state[user_id]['language']
    marketer = get_translation(user_lang, 'marketer_btn')
    programmer = get_translation(user_lang, 'programmer_btn')
    trader = get_translation(user_lang, 'trader_btn')
    close_btn = get_translation(user_lang, "close_btn")
    subscribe = get_translation(user_lang, 'tariffs_btn')

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="üìù " + marketer, callback_data='marketer_callback'))
    markup.add(types.InlineKeyboardButton(text="üíª " + programmer, callback_data='programmer_callback'))
    markup.add(types.InlineKeyboardButton(text="üíπ " + trader, callback_data='trader_callback'))
    markup.add(types.InlineKeyboardButton(text="üöÄ " + subscribe, callback_data='subscribe_callback'))
    markup.add(types.InlineKeyboardButton(text=close_btn, callback_data='close_callback'))

    return markup


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è InlineKeyboard –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ /start
def get_preview_inline_keyboard(user_id):
    user_lang = user_state[user_id]['language']
    marketer = get_translation(user_lang, 'marketer_btn')
    programmer = get_translation(user_lang, 'programmer_btn')
    trader = get_translation(user_lang, 'trader_btn')
    clean_chat = get_translation(user_lang, 'clean_chat_msg')
    subscribe = get_translation(user_lang, 'tariffs_btn')

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="üìù " + marketer, callback_data='marketer_callback'))
    markup.add(types.InlineKeyboardButton(text="üíª " + programmer, callback_data='programmer_callback'))
    markup.add(types.InlineKeyboardButton(text="üíπ " + trader, callback_data='trader_callback'))
    markup.add(types.InlineKeyboardButton(text="üí¨" + clean_chat, callback_data='clean_chat'))
    markup.add(types.InlineKeyboardButton(text="üöÄ " + subscribe, callback_data='subscribe_callback'))

    return markup


# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
def get_language_inline_k(user_id):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('English', callback_data='lang_en'))
    markup.add(types.InlineKeyboardButton('Russian', callback_data='lang_ru'))
    markup.add(types.InlineKeyboardButton('Ukrainian', callback_data='lang_ua'))
    bot.send_message(user_id, 'Choose language:', reply_markup=markup)


# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
def get_choose_ai_inline_k(user_id):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚òÅÔ∏è Claude-3', callback_data='claude_inline_btn'))
    markup.add(types.InlineKeyboardButton('üíª Chat-GPT', callback_data='chat-gpt_inline_btn'))
    bot.send_message(user_id, interactions.show_select_ai_interaction(user_lang=user_state[user_id]['language']),
                     reply_markup=markup)


# –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def choose_language(user_id):
    get_language_inline_k(user_id)


# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
def download_and_convert_document(file_id, message):
    file_info = bot.get_file(file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    file_size = file_info.file_size

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–Ω–µ –±–æ–ª–µ–µ 10 –ú–ë)
    if file_size > 10 * 1024 * 1024:
        bot.send_message(message.chat.id, "The file is too large. Please upload a smaller file.")
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ª–æ–∫–∞–ª—å–Ω–æ
    with open('temp_file.pdf', 'wb') as new_file:
        new_file.write(downloaded_file)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF –≤ —Ç–µ–∫—Å—Ç
    text = convert_to_text('temp_file.pdf')

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(message.chat.id, text)

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    os.remove('temp_file.pdf')


# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF –≤ —Ç–µ–∫—Å—Ç
def convert_to_text(inputPDF):
    from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter
    from pdfminer.pdfpage import PDFPage
    from pdfminer.converter import TextConverter
    from pdfminer.layout import LAParams
    import io

    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ PDFResourceManager –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
    res_mgr = PDFResourceManager()
    ret_data = io.StringIO()
    txt_converter = TextConverter(res_mgr, ret_data, laparams=LAParams())
    interpreter = PDFPageInterpreter(res_mgr, txt_converter)

    # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ PDF
    with open(inputPDF, 'rb') as in_file:
        for page in PDFPage.get_pages(in_file, caching=True):
            interpreter.process_page(page)

    text = ret_data.getvalue()

    # –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç —Ç–µ–∫—Å—Ç–∞
    txt_converter.close()
    ret_data.close()
    return text


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
def send_error_message(message):
    bot.send_message(message.chat.id, "Something wrong")

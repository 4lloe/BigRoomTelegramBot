import json
import datetime
from utils.config import telegrambot_token, api_key, LOCALES_DIR, bot
from telebot import types
import io
import sys
import os

# !!!–ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î
# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ —Å—Ç–æ–∏—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
user_state = {}
ai_messages_buffer = []


def user_init(user_id):  # –ü–µ—Ä–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ FREE
    if user_id not in user_state:
        user_state[user_id] = {
            'started': True,
            'language': None,  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            'subscribe_type': 'claude-3-haiku-20240307',  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            'valid_until': datetime.date(2024, 3, 19),  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            'current_model': None,  # –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å
            'haiku_req': 3,  # –°—á—ë—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ö–∞–π–∫—É
            'sonnet_req': 0,  # –°—á—ë—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–æ–Ω–Ω–µ—Ç–æ–≤
            'gptTurbo_req': 0,  # –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ GPT-Turbo
            'payment_type': 'none'
        }


def load_translations(lang_code):
    with open(f'locales/{lang_code}.json', 'r', encoding='utf-8') as file:
        return json.load(file)


translations_cache = {}


def get_translation(lang_code, key):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —è–∑—ã–∫–∞ –≤ –∫—ç—à
    if lang_code not in translations_cache:
        translations_cache[lang_code] = load_translations(lang_code)
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –∫–ª—é—á—É
    return translations_cache[lang_code].get(key, "")


def get_user_language(user_id):
    if user_id in user_state:
        return user_state[user_id]
    else:
        return 'en'


def get_user_lang(user_id):
    if user_state[user_id]['language'] is None:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('English', callback_data='lang_en'))
        markup.add(types.InlineKeyboardButton('Russian', callback_data='lang_ru'))
        markup.add(types.InlineKeyboardButton('Ukrainian', callback_data='lang_ua'))
        bot.send_message(user_id, 'Choose language:', reply_markup=markup)
    else:
        show_keyboard(user_id)


# –ú–µ—Ç–æ–¥ —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –≤—ã–≤–æ–¥ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ–ø—Ü–∏—è–º–∏
def show_keyboard(user_id, call):
    if user_id in user_state and user_state[user_id]['language']:
        user_lang = user_state[user_id]['language']
        account_btn = get_translation(user_lang, "account_btn")
        settings_btn = get_translation(user_lang, "settings_btn")
        tariffs_btn = get_translation(user_lang, "tariffs_btn")
        allow_models_btn = get_translation(user_lang, "allow_models_btn")

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
        markup.add(account_btn, settings_btn, allow_models_btn, tariffs_btn)

        bot.send_message(user_id, call, reply_markup=markup)

    else:
        get_user_lang(user_id)


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è InlineKeyboard –¥–ª—è account
def get_account_inline_keyboard(user_id):
    user_lang = user_state[user_id]['language']

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
    settings_text = get_translation(user_lang, "settings_btn")
    buy_premium_text = get_translation(user_lang, "buy_subscribe_btn")

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="‚öôÔ∏è" + settings_text, callback_data='settings'))
    markup.add(types.InlineKeyboardButton(text="üå†" + buy_premium_text, callback_data='buy_subscribe'))

    return markup


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è InlineKeyboard –¥–ª—è /settings
def get_settings_inline_keyboard(user_id):
    user_lang = user_state[user_id]['language']

    language_change_text = get_translation(user_lang, "sb_language_change_btn")
    choose_models_text = get_translation(user_lang, "choose_model_settings_text")
    close_text = get_translation(user_lang, "close_btn")
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="üá∫üá¶" + language_change_text, callback_data='language_settings'))
    markup.add(types.InlineKeyboardButton(text="üëæ" + choose_models_text, callback_data='models_settings'))
    markup.add(types.InlineKeyboardButton(text=close_text, callback_data='close_callback'))

    return markup


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è InlineKeyboard –¥–ª—è /subscribe
def get_subscribe_inline_keyboard(user_id):
    global starter_text, intermediate_text, advanced_text
    user_lang = user_state[user_id]['language']
    close_btn = get_translation(user_lang, "close_btn")
    if user_lang == "en":
        starter_text = "üëå Buy Starter for 14.80$/month"
        intermediate_text = "üåâ Buy Intermediate for 19.93$/month"
        advanced_text = "üöÄ Buy Advancedfor 29.93$/month"
    elif user_lang == "ru":
        starter_text = "üëå –ö—É–ø–∏—Ç—å Starter –∑–∞ 14.80$/–º–µ—Å—è—Ü"
        intermediate_text = "üåâ –ö—É–ø–∏—Ç—å Intermediate –∑–∞ 19.93$/–º–µ—Å—è—Ü"
        advanced_text = "üöÄ –ö—É–ø–∏—Ç—å Advanced –∑–∞ 29.93$/–º–µ—Å—è—Ü"
    elif user_lang == "ua":
        starter_text = "üëå –ö—É–ø–∏—Ç–∏ Starter –∑–∞ 14.80$/–º—ñ—Å—è—Ü—å"
        intermediate_text = "üåâ –ö—É–ø–∏—Ç–∏ Intermediate –∑–∞ 19.93$/–º—ñ—Å—è—Ü—å"
        advanced_text = "üöÄ –ö—É–ø–∏—Ç–∏ Advanced –∑–∞ 29.93$/–º—ñ—Å—è—Ü—å"

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text=starter_text, callback_data='starter_callback'))
    markup.add(types.InlineKeyboardButton(text=intermediate_text, callback_data='intermediate'))
    markup.add(types.InlineKeyboardButton(text=advanced_text, callback_data='advanced_callback'))
    markup.add(types.InlineKeyboardButton(text=close_btn, callback_data='close_callback'))

    return markup


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è InlineKeyboard –¥–ª—è /models
def get_models_inline_keyboard(user_id):
    user_lang = user_state[user_id]['language']
    marketer = get_translation(user_lang, 'marketer_btn')
    programmer = get_translation(user_lang, 'programmer_btn')
    trader = get_translation(user_lang, 'trader_btn')
    close_btn = get_translation(user_lang, "close_btn")
    subscribe = get_translation(user_lang, 'tariffs_btn')

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="üìù " + marketer, callback_data='marketer_callback'))
    markup.add(types.InlineKeyboardButton(text="üíª " + programmer, callback_data='programmer_callback'))
    markup.add(types.InlineKeyboardButton(text="üíπ " + trader, callback_data='trader_callback'))
    markup.add(types.InlineKeyboardButton(text="üöÄ " + subscribe, callback_data='subscribe_callback'))
    markup.add(types.InlineKeyboardButton(text=close_btn, callback_data='close_callback'))

    return markup


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è InlineKeyboard –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ /start
def get_preview_inline_keyboard(user_id):
    user_lang = user_state[user_id]['language']
    marketer = get_translation(user_lang, 'marketer_btn')
    programmer = get_translation(user_lang, 'programmer_btn')
    trader = get_translation(user_lang, 'trader_btn')
    clean_chat = get_translation(user_lang, 'clean_chat_msg')
    subscribe = get_translation(user_lang, 'tariffs_btn')

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="üìù " + marketer, callback_data='marketer_callback'))
    markup.add(types.InlineKeyboardButton(text="üíª " + programmer, callback_data='programmer_callback'))
    markup.add(types.InlineKeyboardButton(text="üíπ " + trader, callback_data='trader_callback'))
    markup.add(types.InlineKeyboardButton(text="üí¨" + clean_chat, callback_data='clean_chat'))
    markup.add(types.InlineKeyboardButton(text="üöÄ " + subscribe, callback_data='subscribe_callback'))

    return markup


def get_language_inline_k(user_id):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('English', callback_data='lang_en'))
    markup.add(types.InlineKeyboardButton('Russian', callback_data='lang_ru'))
    markup.add(types.InlineKeyboardButton('Ukrainian', callback_data='lang_ua'))
    bot.send_message(user_id, 'Choose language:', reply_markup=markup)


def choose_language(user_id):
    get_language_inline_k(user_id)


def download_and_convert_document(file_id, message):
    file_info = bot.get_file(file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    file_size = file_info.file_size

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞, –Ω–µ –±–æ–ª—å—à–µ –ª–∏ –æ–Ω 10 –ú–ë
    if file_size > 10 * 1024 * 1024:
        bot.send_message(message.chat.id, "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –±—Ä–∞—Ç–∏—à–∫–∞. –î–∞–≤–∞–π —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–º–µ–Ω—å—à–µ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
    with open('temp_file.pdf', 'wb') as new_file:
        new_file.write(downloaded_file)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ —Ç–µ–∫—Å—Ç
    text = convert_to_text('temp_file.pdf')

    # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–∞–∫ —É–≥–æ–¥–Ω–æ...
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é
    bot.send_message(message.chat.id, text)

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
    os.remove('temp_file.pdf')


def convert_to_text(inputPDF):
    from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter
    from pdfminer.pdfpage import PDFPage
    from pdfminer.converter import TextConverter
    from pdfminer.layout import LAParams
    import io

    # PDFResourceManager –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ —à—Ä–∏—Ñ—Ç—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    res_mgr = PDFResourceManager()
    ret_data = io.StringIO()
    txt_converter = TextConverter(res_mgr, ret_data, laparams=LAParams())
    interpreter = PDFPageInterpreter(res_mgr, txt_converter)

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
    with open(inputPDF, 'rb') as in_file:
        for page in PDFPage.get_pages(in_file, caching=True):
            interpreter.process_page(page)

    text = ret_data.getvalue()

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    txt_converter.close()
    ret_data.close()
    return text


def clear_dialog_if_too_large(ai_messages_buffer, max_size_mb=10):
    size_in_bytes = sys.getsizeof(ai_messages_buffer)
    size_in_mb = size_in_bytes / (1024 * 1024)

    if size_in_mb > max_size_mb:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        last_message = ai_messages_buffer[-1]
        # –û—á–∏—â–∞–µ–º –¥–∏–∞–ª–æ–≥
        ai_messages_buffer.clear()
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –¥–∏–∞–ª–æ–≥
        ai_messages_buffer.append(last_message)

    return ai_messages_buffer


def send_error_message(message):
    bot.send_message(message.chat.id, "Something wrong")

import os

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
from telebot import types

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ —É—Ç–∏–ª–∏—Ç—ã
import components
import interactions
import utils.anthropic_requests
import utils.config
import utils.openai_requests

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç bot –∏–∑ —Ñ–∞–π–ª–∞ utils.config
from utils.config import bot


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_command(message):
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ
    if user_id not in components.user_state:
        components.user_init(user_id)
        change_language(message)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞
    else:
        user_lang = components.user_state[user_id].get('language')
        if not user_lang:
            change_language(message)  # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞
        else:
            models_command(message)  # –í—ã–≤–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /language –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@bot.message_handler(commands=['language'])
def change_language(message):
    user_id = message.from_user.id
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('English', callback_data='lang_en'))
    markup.add(types.InlineKeyboardButton('Russian', callback_data='lang_ru'))
    markup.add(types.InlineKeyboardButton('Ukrainian', callback_data='lang_ua'))
    bot.send_message(user_id, 'Choose language:', reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
@bot.message_handler(commands=['settings'])
def show_settings(message):
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —è–∑—ã–∫
    user_id = message.from_user.id
    user_lang = components.user_state[user_id]['language']
    bot.send_message(user_id, interactions.shot_settings_interation(message),
                     reply_markup=components.get_settings_inline_keyboard(user_id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscribe –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
@bot.message_handler(commands=['subscribe'])
def show_subscribe(message):
    user_id = message.from_user.id
    user_lang = components.user_state[user_id]['language']
    interactions.subscribe_text(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /models –∏ /hub
@bot.message_handler(commands=['models', 'hub'])
def models_command(message):
    user_id = message.from_user.id
    user_lang = components.user_state[user_id].get('language') if user_id in components.user_state \
        else components.send_error_message(message)
    welcome_message = components.get_translation(user_lang, "welcome_message")
    components.show_keyboard(user_id, welcome_message)
    bot.send_message(user_id, interactions.show_bot_preview(user_lang),
                     reply_markup=components.get_preview_inline_keyboard(user_id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    utils.anthropic_requests.anthropic_req(message, "image")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
@bot.message_handler(content_types=['document'])
def handle_docs(message):
    user_id = message.from_user.id
    user_lang = components.user_state[user_id]['language']
    file_info = bot.get_file(message.document.file_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if file_info.file_size > 10 * 1024 * 1024:  # –ë–æ–ª—å—à–µ 10 –ú–ë
        bot.reply_to(message, "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –±—Ä–∞—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–º–µ–Ω—å—à–µ.")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file_path = bot.download_file(file_info.file_path)
    temp_file_path = f'temp_files/{file_info.file_id}.pdf'

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
    with open(temp_file_path, 'wb') as file:
        file.write(file_path)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ —Ç–µ–∫—Å—Ç
    text = components.convert_to_text(temp_file_path)

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏
    utils.anthropic_requests.anthropic_req(message, "document", text)

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(temp_file_path)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ InlineKeyboard
@bot.callback_query_handler(func=lambda call: call.data.startswith('lang_'))
def set_language(call):
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
    user_id = call.from_user.id
    lang_code = call.data.split('_')[1]
    is_new_user = user_id not in components.user_state or components.user_state[user_id].get('language') is None

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in components.user_state:
        components.user_state[user_id] = {'language': None}

    components.user_state[user_id]['language'] = lang_code

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞
    if lang_code == 'en':
        bot.answer_callback_query(call.id, "English selected!")
        language_selected = "üá¨üáß English was selected!"
    elif lang_code == 'ru':
        bot.answer_callback_query(call.id, "–†—É—Å—Å–∫–∏–π –≤—ã–±—Ä–∞–Ω!")
        language_selected = "üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –≤—ã–±—Ä–∞–Ω!"
    elif lang_code == 'ua':
        bot.answer_callback_query(call.id, "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –≤–∏–±—Ä–∞–Ω–∞!")
        language_selected = "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if is_new_user:
        bot.delete_message(call.message.chat.id, call.message.message_id)
        components.show_keyboard(user_id, language_selected)
        start_command(call)
    else:
        bot.delete_message(call.message.chat.id, call.message.message_id)
        components.show_keyboard(user_id, language_selected)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    user_lang = components.user_state[user_id].get('language') if user_id in components.user_state else None

    if user_lang:
        user_lang = components.user_state[user_id]['language']
        account_text = components.get_translation(user_lang, "account_btn")
        settings_text = components.get_translation(user_lang, "settings_btn")
        tariffs_text = components.get_translation(user_lang, "tariffs_btn")
        allow_models_text = components.get_translation(user_lang, "allow_models_btn")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        if message.text == account_text:
            interactions.show_account(user_id)
        elif message.text == settings_text:
            show_settings(message)
        elif message.text == tariffs_text:
            show_subscribe(message)
        elif message.text == allow_models_text:
            interactions.model_description(message)
        else:
            ai_claude_list = ['claude-3-haiku-20240307', 'claude-3-sonnet-20240229', 'claude-3-opus-20240229']
            user_sub_type = components.user_state[user_id]['subscribe_type']
            if user_sub_type in ai_claude_list:
                utils.anthropic_requests.anthropic_req(message, "text")
            else:
                utils.openai_requests.ask_gpt(message, user_id)
    else:
        # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ –≤—ã–±–æ—Ä
        change_language(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ–Ω—é

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ê–∫–∫–∞—É–Ω—Ç -> –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
@bot.callback_query_handler(func=lambda call: call.data == 'settings')
def callback_settings(message):
    show_settings(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ú–æ–¥–µ–ª–∏ -> –ú–æ–¥–µ–ª–∏
@bot.callback_query_handler(func=lambda call: call.data == 'models_settings')
def models_call_handler(call):
    models_command(call)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ê–∫–∫–∞—É–Ω—Ç -> –ü–æ–¥–ø–∏—Å–∫–∞
@bot.callback_query_handler(func=lambda call: call.data == 'buy_subscribe')
def callback_subscribe(message):
    show_subscribe(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -> –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞
@bot.callback_query_handler(func=lambda call: call.data == 'language_settings')
def callback_language_settings(call):
    change_language(call)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -> –ó–∞–∫—Ä—ã—Ç—å
@bot.callback_query_handler(func=lambda call: call.data == 'close_callback')
def callback_close_settings(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ü–æ–¥–ø–∏—Å–∫–∞
@bot.callback_query_handler(func=lambda call: call.data == 'subscribe_callback')
def subscribe_callback(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    show_subscribe(call)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ú–æ–¥–µ–ª–∏ -> –ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥
@bot.callback_query_handler(func=lambda call: call.data == 'marketer_callback')
def marketer_callback(call):
    user_id = call.from_user.id
    user_lang = components.user_state[user_id].get('language', 'en')  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    components.user_state[user_id]['assistant_role'] = 'marketer'
    description = interactions.marketer_model_description(user_lang)
    bot.send_message(user_id, description)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ú–æ–¥–µ–ª–∏ -> –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç
@bot.callback_query_handler(func=lambda call: call.data == 'programmer_callback')
def programmer_callback(call):
    user_id = call.from_user.id
    user_lang = components.user_state[user_id].get('language', 'en')  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    components.user_state[user_id]['assistant_role'] = 'programmer'
    description = interactions.programmer_model_description(user_lang)
    bot.send_message(user_id, description)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ú–æ–¥–µ–ª–∏ -> –¢—Ä–µ–π–¥–µ—Ä
@bot.callback_query_handler(func=lambda call: call.data == 'trader_callback')
def trader_callback(call):
    user_id = call.from_user.id
    user_lang = components.user_state[user_id].get('language', 'en')  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    components.user_state[user_id]['assistant_role'] = 'trader'
    description = interactions.trader_model_description(user_lang)
    bot.send_message(user_id, description)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data == 'clean_chat')
def programmer_callback(call):
    user_id = call.from_user.id
    user_lang = components.user_state[user_id].get('language', 'en')  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π

    if user_lang == 'en':
        bot.send_message(user_id,
                         "Your chat with the bot has started! ‚ú® Enter your message on the keyboard -> send it -> receive a response.")
    elif user_lang == 'ua':
        bot.send_message(user_id,
                         "–í–∞—à —á–∞—Ç –∑ –±–æ—Ç–æ–º —Ä–æ–∑–ø–æ—á–∞—Ç–æ! ‚ú® –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ -> –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –π–æ–≥–æ -> –æ—Ç—Ä–∏–º–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")
    elif user_lang == 'ru':
        bot.send_message(user_id,
                         "–í–∞—à —á–∞—Ç —Å –±–æ—Ç–æ–º –Ω–∞—á–∞–ª—Å—è! ‚ú® –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ -> –æ—Ç–ø—Ä–∞–≤—å—Ç–µ -> –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ AI –º–æ–¥–µ–ª–µ–π

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ Claude
@bot.callback_query_handler(func=lambda call: call.data == 'choose_ai_call-handler')
def select_ai_callback(call):
    user_id = call.from_user.id
    user_lang = components.user_state[user_id]['language']
    components.get_choose_ai_inline_k(user_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ Claude
@bot.callback_query_handler(func=lambda call: call.data == 'claude_inline_btn')
def set_claude_inline_btn(call):
    user_id = call.from_user.id
    components.user_state[user_id]['subscribe_type'] = "claude-3-haiku-20240307"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ ChatGPT
@bot.callback_query_handler(func=lambda call: call.data == 'chat-gpt_inline_btn')
def set_chat_inline_btn(call):
    user_id = call.from_user.id
    components.user_state[user_id]['subscribe_type'] = "gpt-3.5-turbo-instruct"


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç
bot.infinity_polling()
